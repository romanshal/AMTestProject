// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NasaSyncService.Infrastructure.Data.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NasaSyncService.Infrastructure.Data.Migrations
{
    [DbContext(typeof(NasaDbContext))]
    [Migration("20251014114901_AddIndexes")]
    partial class AddIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.GeoLocation", b =>
                {
                    b.Property<Guid>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("MeteoriteId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("LocationId");

                    b.HasIndex("MeteoriteId");

                    b.ToTable("geolocations", (string)null);
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.Meteorite", b =>
                {
                    b.Property<string>("MetioriteId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Extra")
                        .HasColumnType("text");

                    b.Property<string>("Fall")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MassGram")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nametype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("RecclassId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Reclat")
                        .HasColumnType("double precision");

                    b.Property<double?>("Reclong")
                        .HasColumnType("double precision");

                    b.Property<string>("RecordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("YearUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MetioriteId");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Meteorites_Name");

                    b.HasIndex("RecclassId")
                        .HasDatabaseName("IX_Meteorites_RecclassId");

                    b.HasIndex("YearUtc")
                        .HasDatabaseName("IX_Meteorites_YearUtc");

                    b.HasIndex("YearUtc", "MassGram")
                        .HasDatabaseName("IX_Meteorites_YearUtc_MassGram");

                    b.ToTable("meteorites", (string)null);
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.Recclass", b =>
                {
                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecclassName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ClassId");

                    b.ToTable("recclasses", (string)null);
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.Snapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Error")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)");

                    b.Property<int>("FetchedCount")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("FinishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InsertedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("SkippedSameHash")
                        .HasColumnType("boolean");

                    b.Property<string>("SnapshotHash")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("SoftDeletedCount")
                        .HasColumnType("integer");

                    b.Property<string>("SourceUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("UpdatedCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("snapshots", (string)null);
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.GeoLocation", b =>
                {
                    b.HasOne("NasaSyncService.Infrastructure.Data.Entities.Meteorite", "Meteorite")
                        .WithMany("GeoLocations")
                        .HasForeignKey("MeteoriteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meteorite");
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.Meteorite", b =>
                {
                    b.HasOne("NasaSyncService.Infrastructure.Data.Entities.Recclass", "Recclass")
                        .WithMany("Meteorites")
                        .HasForeignKey("RecclassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recclass");
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.Meteorite", b =>
                {
                    b.Navigation("GeoLocations");
                });

            modelBuilder.Entity("NasaSyncService.Infrastructure.Data.Entities.Recclass", b =>
                {
                    b.Navigation("Meteorites");
                });
#pragma warning restore 612, 618
        }
    }
}
